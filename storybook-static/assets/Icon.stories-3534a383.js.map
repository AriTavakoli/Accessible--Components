{"version":3,"file":"Icon.stories-3534a383.js","sources":["../../src/components/IconWrapper/Sprite.svg","../../src/components/IconWrapper/Icon.tsx"],"sourcesContent":["export default \"__VITE_ASSET__6fecd5c1__\"","import React, { FunctionComponent, useState, useEffect, useCallback } from 'react';\r\nimport sprite from './Sprite.svg';\r\n\r\ninterface IconProps {\r\n  id: string;\r\n  size?: number;\r\n  color?: string;\r\n  onClick?: () => void;\r\n  padding?: string;\r\n  title? : string;\r\n  transitionId?: string;\r\n  transitionDuration?: number;\r\n}\r\n\r\nconst usePreload = (url: string) => {\r\n  const [loaded, setLoaded] = useState(false);\r\n  const onLoad = useCallback(() => {\r\n    setLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const prefetchLink = document.createElement('link');\r\n    prefetchLink.href = url;\r\n    prefetchLink.rel = 'prefetch';\r\n    prefetchLink.as = 'image';\r\n    prefetchLink.addEventListener('load', onLoad);\r\n    document.body.appendChild(prefetchLink);\r\n    return () => document.body.removeChild(prefetchLink);\r\n  }, [onLoad, url]);\r\n\r\n  return loaded;\r\n};\r\n\r\nconst Icon: FunctionComponent<IconProps> = React.memo(({ onClick, id, padding, transitionId, transitionDuration, ...props }) => {\r\n  const [currentId, setCurrentId] = useState(id);\r\n  const url = sprite + `#${currentId}`;\r\n  const loaded = usePreload(url);\r\n\r\n  const [currentColor, setCurrentColor] = useState(props.color);\r\n\r\n\r\n  const iconStyle = {\r\n    padding: padding || undefined,\r\n    zIndex: 1000,\r\n  };\r\n\r\n  const handleClick = useCallback(() => {\r\n    if (onClick) {\r\n      onClick();\r\n    }\r\n\r\n    if (transitionId) {\r\n      setCurrentId(transitionId);\r\n      setTimeout(() => setCurrentId(id), transitionDuration || 2000);\r\n    }\r\n\r\n  }, [onClick, id, transitionId, transitionDuration]);\r\n\r\n  return loaded ? (\r\n    <svg\r\n      {...props}\r\n      color={currentColor}\r\n      style={iconStyle}\r\n      width={props.size}\r\n      onClick={handleClick}\r\n      height={props.size}\r\n      onMouseEnter={() => { setCurrentColor(props.color2) }}\r\n      onMouseLeave={() => { setCurrentColor(props.color) }}\r\n    >\r\n      <use xlinkHref={url} />\r\n    </svg>\r\n  ) : null;\r\n});\r\n\r\nexport default React.memo(Icon);\r\n"],"names":["sprite","usePreload","url","loaded","setLoaded","useState","onLoad","useCallback","useEffect","prefetchLink","Icon","React","onClick","id","padding","transitionId","transitionDuration","props","currentId","setCurrentId","currentColor","setCurrentColor","iconStyle","handleClick","jsx","Icon$1"],"mappings":"+HAAA,MAAeA,EAAA,GAAA,IAAA,IAAA,sBAAA,YAAA,GAAA,EAAA,KCcfC,EAAAC,GAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EACAC,EAAAC,EAAAA,YAAA,IAAA,CACEH,EAAA,EAAA,CAAc,EAAA,CAAA,CAAA,EAGhBI,OAAAA,EAAAA,UAAA,IAAA,CACE,MAAAC,EAAA,SAAA,cAAA,MAAA,EACA,OAAAA,EAAA,KAAAP,EACAO,EAAA,IAAA,WACAA,EAAA,GAAA,QACAA,EAAA,iBAAA,OAAAH,CAAA,EACA,SAAA,KAAA,YAAAG,CAAA,EACA,IAAA,SAAA,KAAA,YAAAA,CAAA,CAAmD,EAAA,CAAAH,EAAAJ,CAAA,CAAA,EAGrDC,CACF,EAEAO,EAAAC,EAAA,KAAA,CAAA,CAAA,QAAAC,EAAA,GAAAC,EAAA,QAAAC,EAAA,aAAAC,EAAA,mBAAAC,EAAA,GAAAC,CAAA,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAd,EAAA,SAAAQ,CAAA,EACAX,EAAAF,EAAA,IAAAkB,CAAA,GACAf,EAAAF,EAAAC,CAAA,EAEA,CAAAkB,EAAAC,CAAA,EAAAhB,EAAAA,SAAAY,EAAA,KAAA,EAGAK,EAAA,CAAkB,QAAAR,GAAA,OACI,OAAA,GACZ,EAGVS,EAAAhB,EAAAA,YAAA,IAAA,CACEK,GACEA,IAGFG,IACEI,EAAAJ,CAAA,EACA,WAAA,IAAAI,EAAAN,CAAA,EAAAG,GAAA,GAAA,EACF,EAAA,CAAAJ,EAAAC,EAAAE,EAAAC,CAAA,CAAA,EAIF,OAAAb,EAAAqB,EAAA,IACE,MAAC,CAAA,GAAAP,EACK,MAAAG,EACG,MAAAE,EACA,MAAAL,EAAA,KACM,QAAAM,EACJ,OAAAN,EAAA,KACK,aAAA,IAAA,CACQI,EAAAJ,EAAA,MAAA,CAA4B,EAAE,aAAA,IAAA,CAC9BI,EAAAJ,EAAA,KAAA,CAA2B,EAAE,SAAAO,EAAAA,IAAA,MAAA,CAAA,UAAAtB,CAAA,CAAA,CAE9B,CAAA,EAAA,IAG3B,CAAA,EAEAuB,EAAAd,EAAA,KAAAD,CAAA"}