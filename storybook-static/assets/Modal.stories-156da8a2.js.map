{"version":3,"file":"Modal.stories-156da8a2.js","sources":["../../src/components/hooks/useOnClickOutside.tsx","../../src/components/hooks/useFocusCycle.tsx","../../src/components/Modal/Variants/components/ModalVariants/ModalBody-Variants/components/Agree.tsx","../../src/components/Modal/Variants/components/ModalVariants/ModalBody-Variants/components/Continue.tsx","../../src/components/Modal/Variants/components/ModalVariants/ModalBody-Variants/ModalBody-index.tsx","../../src/components/Modal/Modal-index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\n\r\nfunction useOnClickOutside(\r\n  ref: React.MutableRefObject<HTMLElement | null>,\r\n  handler: (event: MouseEvent | TouchEvent) => void\r\n) {\r\n\r\n  useEffect(() => {\r\n    const listener = (event: MouseEvent | TouchEvent) => {\r\n      if (!ref.current || ref.current.contains(event.target)) {\r\n        return;\r\n      }\r\n      handler(event);\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", listener);\r\n    document.addEventListener(\"touchstart\", listener);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", listener);\r\n      document.removeEventListener(\"touchstart\", listener);\r\n    };\r\n  }, [ref, handler]);\r\n}\r\n\r\n\r\nexport default useOnClickOutside;","import { useEffect } from 'react';\r\n\r\nfunction useFocusCycle(modalRef: React.RefObject<HTMLDivElement>, modalIsOpen: boolean, focusLock: boolean) {\r\n\r\n  useEffect(() => {\r\n    const focusTrap = (event: KeyboardEvent) => {\r\n      if (!focusLock) return;\r\n\r\n      const focusableElements = modalRef.current?.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\r\n      const firstElement = focusableElements?.[0] as HTMLElement;\r\n      const lastElement = focusableElements?.[focusableElements.length - 1] as HTMLElement;\r\n\r\n      if (event.key === 'Tab') {\r\n        if (event.shiftKey && document.activeElement === firstElement) {\r\n          event.preventDefault();\r\n          lastElement?.focus();\r\n        } else if (!event.shiftKey && document.activeElement === lastElement) {\r\n          event.preventDefault();\r\n          firstElement?.focus();\r\n        }\r\n      }\r\n    };\r\n\r\n    if (modalIsOpen) {\r\n      modalRef.current?.addEventListener('keydown', focusTrap);\r\n    }\r\n\r\n    return () => {\r\n      modalRef.current?.removeEventListener('keydown', focusTrap);\r\n    };\r\n  }, [modalIsOpen, focusLock, modalRef]);\r\n}\r\n\r\n\r\nexport default useFocusCycle;","\r\nimport Button from '../../../ButtonVariants/Button';\r\nimport clsx from 'clsx';\r\n\r\ninterface Props {\r\n  title: string;\r\n  body: string;\r\n  buttonVariant?: string | 'outline' | 'solid';\r\n  onAccept?: () => void;\r\n  onDecline?: () => void;\r\n  onClose?: () => void;\r\n  backgroundMask?: boolean;\r\n  setModalStatus: (status: boolean) => void;\r\n  modalRef: React.MutableRefObject<HTMLDivElement | null>;\r\n  closeButtonRef: React.MutableRefObject<HTMLButtonElement | null>;\r\n  theme?: string | \"dark\" | \"light\"\r\n}\r\n\r\nfunction Agree({\r\n  title,\r\n  body,\r\n  onAccept,\r\n  onDecline,\r\n  onClose,\r\n  buttonVariant = 'outline',\r\n  theme,\r\n  backgroundMask = false,\r\n  setModalStatus,\r\n  modalRef,\r\n  closeButtonRef,\r\n\r\n}: Props) {\r\n\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-labelledby=\"modal-title\"\r\n        aria-describedby=\"modal-description\"\r\n        className={clsx(\r\n          'fixed top-0 left-0 right-0 bottom-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full flex items-center justify-center',\r\n          backgroundMask ? theme === 'dark' ? 'dark:bg-gray-900' : 'dark:bg-gray-900' : \"\"\r\n        )}\r\n      >\r\n        {/* Modal Body*/}\r\n        <div ref={modalRef} className=\"relative w-full max-w-2xl max-h-full border-primary-200\">\r\n          <div\r\n            className={clsx(\r\n              'relative bg-white rounded-lg shadow',\r\n              theme === 'light' ? 'light:bg-white-700' : 'dark:bg-gray-700',\r\n            )}\r\n          >\r\n            {/* TopBar */}\r\n\r\n            {/* Border */}\r\n            <div\r\n              className={clsx(\r\n                'flex items-start justify-between p-4 border-b rounded-t',\r\n                theme === 'light' ? 'light:border-gray-600' : 'dark:border-gray-600'\r\n              )}\r\n            >\r\n              {/*  Title */}\r\n              <h3\r\n                id=\"modal-title\"\r\n                className={clsx(\r\n                  'text-xl font-semibold',\r\n                  theme === 'light' ? 'text-gray-900' : 'text-white'\r\n                )}\r\n              >\r\n                {title}\r\n              </h3>\r\n              {/* Close button */}\r\n              <button\r\n                ref={closeButtonRef}\r\n                type=\"button\"\r\n                className={clsx(\r\n                  'text-gray-400 bg-transparent hover:bg-gray-100 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center',\r\n                  theme === 'light'\r\n                    ? 'dark:hover:hover:bg-primary-600 dark:hover:text-white'\r\n                    : 'dark:hover:bg-primary-600 dark:hover:text-white'\r\n                )}\r\n                onClick={() => {\r\n\r\n                  setModalStatus(false);\r\n                  onClose && onClose()\r\n                }}\r\n                aria-label=\"Close modal\"\r\n                aria-labelledby=\"modal-title\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div\r\n              id=\"modal-description\"\r\n              className=\"p-6 space-y-6 flex items-start\"\r\n              aria-live=\"polite\"\r\n            >\r\n              {/* Modal content */}\r\n              <div className=\"space-y-4\">\r\n                <p\r\n                  className={clsx(\r\n                    'text-base',\r\n                    theme === 'light' ? 'text-gray-900' : 'text-white'\r\n                  )}\r\n                >\r\n                  {body}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Border */}\r\n            <div\r\n              className={clsx(\r\n                'flex justify-end items-end p-6 space-x-2 border-t border-gray-200 rounded-b',\r\n                theme === 'light' ? 'light:border-gray-600' : 'dark:border-gray-600'\r\n              )}\r\n            >\r\n\r\n\r\n              {/* Continue Button */}\r\n              <Button\r\n                isDark={theme === 'dark'}\r\n                variant={buttonVariant}\r\n                onClick={() => {\r\n                  setModalStatus(false);\r\n                  onAccept && onAccept();\r\n                }\r\n                }\r\n                aria-label=\"Continue\"\r\n              >\r\n                Continue\r\n\r\n              </Button>\r\n\r\n              {/* Cancel Button */}\r\n\r\n              <Button\r\n                isDark={theme === 'dark'}\r\n                variant={buttonVariant === 'primary' ? 'outline' : 'primary'}\r\n\r\n                onClick={() => {\r\n                  setModalStatus(false);\r\n                  onDecline && onDecline();\r\n                }\r\n                }\r\n                aria-label=\"Cancel\"\r\n              >\r\n                Cancel\r\n\r\n              </Button>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Agree","\r\nimport Button from '../../../ButtonVariants/Button';\r\nimport clsx from 'clsx';\r\n\r\ninterface Props {\r\n  title: string;\r\n  body: string;\r\n  buttonVariant?: string | 'outline' | 'solid';\r\n  onAccept?: () => void;\r\n  onDecline?: () => void;\r\n  onClose?: () => void;\r\n  backgroundMask?: boolean;\r\n  setModalStatus: (status: boolean) => void;\r\n  modalRef: React.MutableRefObject<HTMLDivElement | null>;\r\n  closeButtonRef: React.MutableRefObject<HTMLButtonElement | null>;\r\n  theme?: string | \"dark\" | \"light\"\r\n}\r\n\r\nfunction Continue({\r\n  title,\r\n  body,\r\n  onAccept,\r\n  onDecline,\r\n  onClose,\r\n  buttonVariant = 'outline',\r\n  theme,\r\n  backgroundMask = false,\r\n  setModalStatus,\r\n  modalRef,\r\n  closeButtonRef,\r\n}: Props) {\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        role=\"dialog\"\r\n        aria-modal=\"true\"\r\n        aria-labelledby=\"modal-title\"\r\n        aria-describedby=\"modal-description\"\r\n        className={clsx(\r\n          'fixed top-0 left-0 right-0 bottom-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full flex items-center justify-center',\r\n          backgroundMask ? theme === 'dark' ? 'dark:bg-gray-900' : 'dark:bg-gray-900' : \"\"\r\n        )}\r\n      >\r\n        {/* Modal Body*/}\r\n        <div ref={modalRef} className=\"relative w-full max-w-2xl max-h-full\">\r\n          <div\r\n            className={clsx(\r\n              'relative bg-white rounded-lg shadow',\r\n              theme === 'light' ? 'light:bg-white-700' : 'dark:bg-gray-700'\r\n            )}\r\n          >\r\n            {/* TopBar */}\r\n\r\n            {/* Border */}\r\n            <div\r\n              className={clsx(\r\n                'flex items-start justify-between p-4 border-b rounded-t',\r\n                theme === 'light' ? 'light:border-gray-600' : 'dark:border-gray-600'\r\n              )}\r\n            >\r\n              {/*  Title */}\r\n              <h3\r\n                id=\"modal-title\"\r\n                className={clsx(\r\n                  'text-xl font-semibold',\r\n                  theme === 'light' ? 'text-gray-900' : 'text-white'\r\n                )}\r\n              >\r\n                {title}\r\n              </h3>\r\n              {/* Close button */}\r\n              <button\r\n                ref={closeButtonRef}\r\n                type=\"button\"\r\n                className={clsx(\r\n                  'text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center',\r\n                  theme === 'light'\r\n                    ? 'dark:hover:bg-gray-600 dark:hover:text-white'\r\n                    : 'dark:hover:bg-gray-600 dark:hover:text-white'\r\n                )}\r\n                onClick={() => {\r\n\r\n                  setModalStatus(false);\r\n                  onClose && onClose()\r\n                }}\r\n                aria-label=\"Close modal\"\r\n                aria-labelledby=\"modal-title\"\r\n              >\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div\r\n              id=\"modal-description\"\r\n              className=\"p-6 space-y-6 flex items-start\"\r\n              aria-live=\"polite\"\r\n            >\r\n              {/* Modal content */}\r\n              <div className=\"space-y-4\">\r\n                <p\r\n                  className={clsx(\r\n                    'text-base',\r\n                    theme === 'light' ? 'text-gray-900' : 'text-white'\r\n                  )}\r\n                >\r\n                  {body}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Border */}\r\n            <div\r\n              className={clsx(\r\n                'flex justify-end items-end p-6 space-x-2 border-t border-gray-200 rounded-b',\r\n                theme === 'light' ? 'light:border-gray-600' : 'dark:border-gray-600'\r\n              )}\r\n            >\r\n              {/* Continue Button */}\r\n              <Button\r\n                isDark={theme === 'dark'}\r\n                variant={buttonVariant}\r\n                onClick={() => {\r\n                  setModalStatus(false);\r\n                  onDecline && onDecline();\r\n                }\r\n                }\r\n                aria-label=\"Cancel\"\r\n              >\r\n                Continue\r\n\r\n              </Button>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Continue","import Agree from \"./components/Agree\";\r\nimport Continue from \"./components/Continue\";\r\n\r\ninterface ModalProps {\r\n  title: string;\r\n  body: string;\r\n  onClose: () => void;\r\n  onAccept: () => void;\r\n  onDecline?: () => void;\r\n  focusLock: boolean;\r\n  setModalStatus: React.Dispatch<React.SetStateAction<boolean>>;\r\n  modalRef: React.RefObject<HTMLDivElement>;\r\n  closeButtonRef: React.RefObject<HTMLButtonElement>;\r\n  buttonVariant: string | \"outline\" | \"solid\";\r\n  modalType: \"Agree\" | \"Continue\" | string;\r\n  theme?: any;\r\n  maskColor?: string;\r\n  backgroundMask?: boolean;\r\n\r\n}\r\n\r\nfunction ModalBody(props: ModalProps) {\r\n\r\n  // Create a components mapping\r\n  const ComponentsMap = {\r\n    agree: Agree,\r\n    continue: Continue\r\n  };\r\n\r\n  // Dynamically get the component type\r\n  const ComponentToRender = ComponentsMap[modalType];\r\n\r\n  // Handle unknown modalType\r\n  if (!ComponentToRender) {\r\n    throw new Error(`Invalid prop modalType: ${modalType}`);\r\n  }\r\n\r\n  // Render the chosen component\r\n  return <ComponentToRender {...otherProps} />;\r\n}\r\n\r\nexport default ModalBody;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport useOnClickOutside from '../hooks/useOnClickOutside';\r\nimport useFocusCycle from '../hooks/useFocusCycle';\r\nimport ModalBody from './Variants/components/ModalVariants/ModalBody-Variants/ModalBody-index';\r\n\r\n\r\ninterface ModalProps {\r\n  modalType: string | \"agree\" | \"continue\"\r\n  buttonVariant: string | \"outline\" | \"solid\";\r\n  children?: React.ReactNode;\r\n  title: string;\r\n  body: string;\r\n  onClose: () => void;\r\n  onAccept: () => void;\r\n  onDecline?: () => void;\r\n  backgroundMask?: boolean;\r\n  focusLock: boolean;\r\n  theme?: string | \"dark\"\r\n}\r\n\r\n\r\nconst Modal: React.FC<ModalProps> =\r\n  ({\r\n    children,\r\n    title = \"Sample Title\",\r\n    body = \"yo i am the body of the modal\",\r\n    onAccept,\r\n    onDecline,\r\n    onClose,\r\n    modalType,\r\n    focusLock = true,\r\n    theme,\r\n    backgroundMask = false,\r\n\r\n    buttonVariant = \"outline\"\r\n  }) => {\r\n\r\n    // Modal visibility state\r\n    const [modalStatus, setModalStatus] = useState(false);\r\n\r\n    // Modal Button Refs available for focus\r\n    const modalRef = useRef<HTMLDivElement>(null);\r\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n    const openButtonRef = useRef<HTMLButtonElement>(null);\r\n\r\n    // cycle through the buttons\r\n    useFocusCycle(modalRef, modalStatus, focusLock);\r\n    // close modal on escape key\r\n    useEscapeKey(() => setModalStatus(false));\r\n    // close modal on click outside\r\n    useOnClickOutside(modalRef, () => setModalStatus(false));\r\n\r\n\r\n    useEffect(() => {\r\n      if (!modalStatus) {\r\n        openButtonRef.current?.focus();\r\n      }\r\n    }, [modalStatus]);\r\n\r\n\r\n    return (\r\n      <>\r\n        {/* Launch Button for Modal */}\r\n        {React.Children.map(children, child =>\r\n          React.isValidElement(child) ? React.cloneElement(child, {\r\n            onClick: () => setModalStatus(true),\r\n            ref: openButtonRef,\r\n            type: \"button\"\r\n          }) : child\r\n        )}\r\n\r\n\r\n        {modalStatus && (\r\n          <ModalBody\r\n            backgroundMask={backgroundMask}\r\n            buttonVariant={buttonVariant}\r\n            title={title}\r\n            body={body}\r\n            onAccept={onAccept}\r\n            onDecline={onDecline}\r\n            onClose={onClose}\r\n            modalRef={modalRef}\r\n            closeButtonRef={closeButtonRef}\r\n            setModalStatus={setModalStatus}\r\n            theme={theme}\r\n            modalType={modalType}\r\n            focusLock={focusLock} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\nexport default Modal;\r\n\r\n\r\ntype CallbackFunction = () => void;\r\n\r\nfunction useEscapeKey(callback: CallbackFunction): void {\r\n  useEffect((): () => void => {\r\n    const handleKeyDown = (event: KeyboardEvent): void => {\r\n      if (event.key === 'Escape') {\r\n        callback();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    return (): void => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [callback]);  // add callback to the dependencies array\r\n}\r\n\r\n\r\n"],"names":["useOnClickOutside","ref","handler","useEffect","listener","event","useFocusCycle","modalRef","modalIsOpen","focusLock","focusTrap","focusableElements","_a","firstElement","lastElement","Agree","title","body","onAccept","onDecline","onClose","buttonVariant","theme","backgroundMask","setModalStatus","closeButtonRef","jsx","Fragment","clsx","jsxs","Button","Continue","ModalBody","props","ComponentToRender","Modal","children","modalType","modalStatus","useState","useRef","openButtonRef","useEscapeKey","React","child","Modal$1","callback","handleKeyDown"],"mappings":"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"}